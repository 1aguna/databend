// Copyright 2021 Datafuse Labs.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package meta;

message Empty {}
message GetRequest { string key = 1; }

message GetReply {
  bool ok = 1;
  string value = 2;
}

message RaftRequest {
  string data = 1;
}

message RaftReply {
  string data = 1;
  string error = 2;
}

message HandshakeRequest {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

message HandshakeResponse {
  uint64 protocol_version = 1;
  bytes payload = 2;
}

// Data chunk for export/import meta data
message ExportedChunk {
  repeated string data = 10;
}

message WatchRequest {
  // key is the key to register for watching.
  string key = 1;

  // key_end is the end of the range [key, key_end] to watch.
  // if key_end is None, then watch only key.
  optional string key_end = 2;

  enum FilterType {
    // recv all kind update event.
    ALL = 0;    
    // filter out update event.
    NOUPDATE = 1;
    // filter out delete event.
    NODELETE = 2;
  }  
  FilterType filter_type = 3;
}

message Event {
  enum EventType {
    Update = 0;
    Delete = 1;
  }

  string key = 1;

  EventType event = 2;

  // current hold current value of key(if any)
  optional bytes current = 3;

  // prev value of key
  optional bytes prev = 4;
}

message WatchResponse {
  //ResponseHeader header = 1;
  // watch_id is the ID of the watcher that corresponds to the response.
  int64 watch_id = 1;

  // created is set to true if the response is for a create watch request.
  // The client should record the watch_id and expect to receive events for
  // the created watcher from the same stream.
  // All events sent to the created watcher will attach with the same watch_id.
  optional bool created = 2;

  // canceled is set to true if the response is for a cancel watch request.
  // No further events will be sent to the canceled watcher.
  optional bool canceled = 4;

  repeated Event events = 3;
}

service RaftService {

  rpc Write(RaftRequest) returns (RaftReply) {}
  rpc Get(GetRequest) returns (GetReply) {}

  /// Forward a request to other
  rpc Forward(RaftRequest) returns (RaftReply) {}

  // raft RPC

  rpc AppendEntries(RaftRequest) returns (RaftReply);
  rpc InstallSnapshot(RaftRequest) returns (RaftReply);
  rpc Vote(RaftRequest) returns (RaftReply);
}

service MetaService {
  // handshake
  rpc Handshake(stream HandshakeRequest) returns (stream HandshakeResponse);

  // message
  rpc WriteMsg(RaftRequest) returns (RaftReply);
  rpc ReadMsg(RaftRequest) returns (RaftReply);

  // Export all meta data.
  //
  // Including raft hard state, logs and state machine.
  // The exported data is a list of json strings in form of `(tree_name, sub_tree_prefix, key, value)`.
  rpc Export(Empty) returns (stream ExportedChunk);

  // Add watch key stream.
  // Whenever the watch key data updated, client will be notified accross the stream.
  rpc Watch(WatchRequest) returns (stream WatchResponse);
}
